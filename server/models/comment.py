import datetime
from typing import Optional, List

from pydantic import BaseModel, Field


class Comment(BaseModel):
    commentId: Optional[str] = Field(default=None, description="The comment's ID (will be generated by the database)")
    commenterId: str = Field(..., description="The commenter uid")
    storyId: str = Field(..., description="The story's id")
    isWriter: Optional[bool] = Field(default=False, description="is this the writer's comment?")
    comment: str = Field(..., description="The comment")
    status: Optional[str] = Field(default="published", description="The comment's status")
    createdAt: Optional[str] = Field(default=str(datetime.datetime.utcnow()), description="The time of story creation")

    class Config:
        schema_extra = {
            "example": {
                "commenterId": "1234",
                "storyId": "1234",
                "comment": "Great story",
            }
        }


class UpdateComment(BaseModel):
    commentId: str = Field(..., description="The comment's ID (will be generated by the database)")
    commenterId: str = Field(..., description="The commenter uid")
    storyId: str = Field(..., description="The story's id")
    comment: str = Field(..., description="The comment")
    status: Optional[str] = Field(default="published", description="The comment's status")

    class Config:
        schema_extra = {
            "example": {
                "commenterId": "1234",
                "storyId": "1234",
                "comment": "Great story",
                "status": "deleted"
            }
        }


class ListCommentModel(BaseModel):
    commentId: str = Field(..., description="The comment's ID (will be generated by the database)")
    commenterId: str = Field(..., description="The commenter uid")
    username: str = Field(..., description="The commenter username")
    name: str = Field(..., description="The commenter display name")
    profileImage: str = Field(..., description="The commenter profile image")
    storyId: str = Field(..., description="The story's id")
    isWriter: Optional[bool] = Field(default=False, description="is this the writer's comment?")
    comment: str = Field(..., description="The comment")
    status: Optional[str] = Field(default="published", description="The comment's status")
    createdAt: Optional[str] = Field(default=str(datetime.datetime.utcnow()), description="The time of story creation")


class CommentsList(BaseModel):
    data: List[ListCommentModel]
