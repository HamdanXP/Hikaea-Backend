import datetime
from typing import Optional, List

from pydantic import BaseModel, Field


class Story(BaseModel):
    storyId: Optional[str] = Field(default=None, description="The story's ID (will be generated by the database)")
    writerId: str = Field(..., description="The writer uid")
    content: List[object] = Field(..., description="The story's content")
    title: str = Field(..., description="The story's title")
    description: str = Field(..., description="The story's description")
    slug: str = Field(..., description="The slug is used in URLs (It must be auto generated from the title)")
    categories: list = Field(..., description="The story's categories IDs")
    storyCover: str = Field(..., description="The story's cover")
    views: int = Field(default=0, description="The story's views")
    dailyViews: object = Field(default={}, description="The story's views in each day")
    likesList: list = Field(default=[], description="The list of users who liked the story")
    status: str = Field(..., description="The story's status ('published', 'pending', 'draft', 'rejected', 'deleted')")
    createdAt: Optional[str] = Field(default=str(datetime.datetime.utcnow()), description="The time of story creation")

    class Config:
        schema_extra = {
            "example": {
                "writerId": "1234",
                "content": "[{'text':'This is the first page'}, {'text': 'this is the second page'}]",
                "title": "My story",
                "description": "This is a great story",
                "slug": "my-story",
                "categories": "[12345, 12345]",
                "storyCover": "http://image",
                "status": "pending"
            }
        }


class UpdateStoryModel(BaseModel):
    storyId: Optional[str] = Field(default=None, description="The story's ID (will be generated by the database)")
    content: List[object] = Field(..., description="The story's content")
    title: str = Field(..., description="The story's title")
    description: str = Field(..., description="The story's description")
    slug: str = Field(..., description="The slug is used in URLs (It must be auto generated from the title)")
    categories: list = Field(..., description="The story's categories IDs")
    storyCover: str = Field(..., description="The story's cover")
    status: str = Field(..., description="The story's status ('published', 'pending', 'draft', 'rejected', 'deleted')")

    class Config:
        schema_extra = {
            "example": {
                "content": "[{'text':'This is the first page'}, {'text': 'this is the second page'}]",
                "title": "My story",
                "description": "This is a great story",
                "slug": "my-story",
                "categories": "[12345, 12345]",
                "storyCover": "http://image",
                "status": "pending"
            }
        }


class SimplifiedStory(BaseModel):
    storyId: str = Field(..., description="The story's ID (will be generated by the database)")
    title: str = Field(..., description="The story's title")
    writerName: str = Field(..., description="The story's writer name")
    description: str = Field(..., description="The story's description")
    slug: str = Field(..., description="The slug is used in URLs (It must be auto generated from the title)")
    categories: list = Field(..., description="The story's categories IDs")
    storyCover: str = Field(..., description="The story's cover")
    status: str = Field(..., description="The story's status ('published', 'pending', 'draft', 'rejected', 'deleted')")


class ListStoryModel(BaseModel):
    storyId: Optional[str] = Field(default=None, description="The story's ID (will be generated by the database)")
    writerId: str = Field(..., description="The writer uid")
    writerName: str = Field(..., description="The writer display name")
    profileImage: str = Field(..., description="The writer profile image")
    content: List[object] = Field(..., description="The story's content")
    title: str = Field(..., description="The story's title")
    description: str = Field(..., description="The story's description")
    slug: str = Field(..., description="The slug is used in URLs (It must be auto generated from the title)")
    categories: list = Field(..., description="The story's categories IDs")
    storyCover: str = Field(..., description="The story's cover")
    views: int = Field(default=0, description="The story's views")
    dailyViews: object = Field(default={}, description="The story's views in each day")
    likesList: list = Field(default=[], description="The list of users who liked the story")
    status: str = Field(..., description="The story's status ('published', 'pending', 'draft', 'rejected', 'deleted')")
    createdAt: Optional[str] = Field(default=str(datetime.datetime.utcnow()), description="The time of story creation")


class SimplifiedStoriesList(BaseModel):
    data: List[SimplifiedStory]


class StoriesList(BaseModel):
    data: List[ListStoryModel]


class StoryID(BaseModel):
    storyId: str = Field(..., description="The story's ID (will be generated by the database)")


class StoryReader(BaseModel):
    readerId: str = Field(..., description="The reader's ID")
    storyId: str = Field(..., description="The story's ID (will be generated by the database)")


class StoryLiker(BaseModel):
    likerId: str = Field(..., description="The liker's ID")
    storyId: str = Field(..., description="The story's ID (will be generated by the database)")


class StoriesQuery(BaseModel):
    categories: Optional[list] = Field(default=[], description="The categories you want")
    sortWay: Optional[str] = Field(default="new",
                                   description="The way you want to sort the stories (new, top, trending)")
